[
  {
    "objectID": "ssh_keys.html",
    "href": "ssh_keys.html",
    "title": "Configuring SSH Keys & Credentials",
    "section": "",
    "text": "The instructions below are based on those found at Duke’s GitLab. If the instructions below are not clear you should consult the more complete GitHub instructions to generate and add an SSH key"
  },
  {
    "objectID": "ssh_keys.html#workflow",
    "href": "ssh_keys.html#workflow",
    "title": "Configuring SSH Keys & Credentials",
    "section": "Workflow",
    "text": "Workflow\nOnce you have configured your SSH keys\n\nCreate a repository at https://GitLab.oit.duke.edu\nClone the repo via RStudio &gt; New Project … &gt; Version Control &gt; Git\nRestart RStudio ; look for a Git tab near the Environment tab"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Git, GitHub & RStudio",
    "section": "",
    "text": "The usethis package and the RStudio IDE will help you orchestrate your version control repositories as RStudio projects.\n\n\n\n\nSetup\nTo get started, make a free GitHub.com account. Make sure you have the latest versions of R, RStudio, and usethis. Then, setup your RStudio configuration using two key documents: Setup, and Managing Git(Hub) Credentials.\nNote: Check to see if you already have git on your local workstation. You can do this by running system(\"git --version\") in the RStudio console. Often, windows users must first manually install Git. Either way, y\n\n\nTips\n\nConfigure git and manage GitHub credentials (PAT)\nThe following are steps you can inovke in your RStudio IDE to securely connect your RStudio instance to GitHub. I recommend invoking these functions in the RStudio console. The steps in the code chunk below only need to be inovked once per RStudio instance, per active PAT. First, Log in to GitHub, then it is easy to create new GitHub PATs from the RStudio console: usethis::create_github_token().\nBy default Personal Access Tokens (PATs) expire every 30 days. GitHub tokens (PATs) can be managed at the GitHub developer page.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf this is your first time, you will probably need to run usethis::use_git_config(). Typically the process of setting your git configuration with your GitHub ID and associated email is only done once, i.e. the first time.\nBy contrast, you will need to rerun usethis::create_github_token() each time a PAT expires.\n\n\n\n# Sign-in to your GitHub account\n# Read: https://usethis.r-lib.org/articles/articles/git-credentials.html\n# Read: https://usethis.r-lib.org/articles/articles/usethis-setup.html\nusethis::create_github_token()\ngitcreds::gitcreds_set()\n\n# Now check that your git credentials are set.  A main are to look for is whether you have confgigured your git user.name and user.email.\ngh::gh_whoami()\nusethis::gh_token_help()\nusethis::use_git_config(user.name = \"Jane Doe\", user.email = \"jane@example.com\")\nusethis::gh_token_help()\n\n\n\nCreate a new RStudio Project\nIt’s recommended to use RStudio to create your git repo as you create an RStudio project. In this method, after selecting a “New Project (Directions)”, make sure to select the “Create a git repository” option when creating a new project in RStudio. This will ensure that your RStudio project is properly linked to your git repository. Then add a README file and a license before connecting your local repository to GitHub.\n\n\n\n\n\nuse_readme.md()\nuse_ccby_license() # Optionally, add a license\n\n# Before next step  → stage & commit changes\nuse_github()       # Connect local repo to GitHub\n\n\n\nAlternatively, transform an existing folder\nOn your local workstation, you can transform a local folder into an RStudio project and also make that project a git repository. Then connect the local repository to GitHub.\nThis will transform the local folder into an RStudio project. Howver, with this approach you must then create local git repository and then connect that repo to GitHub from local.\n\nlibrary(usethis)\n\nuse_git()          # initialize a git repo\n# use_git_ignore()  The .gitignore file is created by default running use_git()\nuse_readme.md()\nuse_ccby_license() # Optionally, add a license\n\n# Before next step  → stage & commit changes\nuse_github()       # Connect local repo to GitHub\n\n\n\nRename default branch\n\nlibrary(usethis)\ngit_default_branch()\ngit_default_branch_rename()\ngit_default_branch_rediscover()\n\n\n\n\n\n\n\nClone or fork from GitHub\n\nusethis::create_from_github(\"https://github.com/data-and-visualization/git-tutorial\")\n\n\n\n\nNext Level…\nTake your reproducibility to the next level. Make your code citable by connecting your GitHub repo and your ORCID (unique author ID) through to the Zenodo archival repository. Now, every time you commit a milestone release, you also mint a DOI.\n\nShare a zero-install compute environment\nPublish your code in a binder.org container\n\nFull documentation to create a sharable RStudio compute environment is documented on this Quarto page about projects.\nThe key elements are an install.R and runtime.txt files. The content and format of each file is demonstrated properly at the GitHub repo. Browse and you will see.\nIn summary, at the Terminal, type: quarto use binder\n\n\nHints\nGenerate a binder badge with usethis::use_binder_badge(urlpath = \"rstudio\"). This should store the badge in your GitHub’s project README file. Then commit and push your changes to GitHub; go to the README on GitHub, launch the build and wait for the long launch/build time.\nHint: be prepared to wait. The first build can take some time. Sometimes you must launch an initial or dormant build more than once. In my experienced these hiccups are rare, but try the launch twice before getting involved in extensive troubleshooting.\n\nThe old documentation from this site can be found in the v.0.2019 release on GitHub.\n\n\n\n\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "https://github.com\nhttps://gitlab.com\nhttps://bitbucket.org\nDuke’s GitLab Instance\n\nManaging SSH keys\n\n\n\n\n\nhttps://usethis.r-lib.org/\nholepunch to make your reproducible code a container on binder.org\n\n\n\n\n\nHappy Git and GitHub for the useR\n\n\n\n\n\n10 Common Problems / Solutions"
  },
  {
    "objectID": "resources.html#social-coding-sites",
    "href": "resources.html#social-coding-sites",
    "title": "Resources",
    "section": "",
    "text": "https://github.com\nhttps://gitlab.com\nhttps://bitbucket.org\nDuke’s GitLab Instance\n\nManaging SSH keys\n\n\n\n\n\nhttps://usethis.r-lib.org/\nholepunch to make your reproducible code a container on binder.org\n\n\n\n\n\nHappy Git and GitHub for the useR\n\n\n\n\n\n10 Common Problems / Solutions"
  },
  {
    "objectID": "resources.html#reproducibility",
    "href": "resources.html#reproducibility",
    "title": "Resources",
    "section": "Reproducibility",
    "text": "Reproducibility\n\nWriting clear code: Tools for Reproducible Research\nInitial Steps Toward Reproducible Research\nMaking your research reproducible with TIER + R + GitHub [Slides]. Cetinkaya-Rundel, M. (2016). Open Science Framework. Retrieved from https://osf.io/phyau"
  }
]